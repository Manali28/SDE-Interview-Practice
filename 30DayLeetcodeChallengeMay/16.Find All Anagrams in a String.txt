/*
Given a string s and a non-empty string p, find all the start indices of p's anagrams in s.

Strings consists of lowercase English letters only and the length of both strings s and p will not be larger than 20,100.

The order of output does not matter.

Example 1:

Input:
s: "cbaebabacd" p: "abc"

Output:
[0, 6]

Explanation:
The substring with start index = 0 is "cba", which is an anagram of "abc".
The substring with start index = 6 is "bac", which is an anagram of "abc".
Example 2:

Input:
s: "abab" p: "ab"

Output:
[0, 1, 2]

Explanation:
The substring with start index = 0 is "ab", which is an anagram of "ab".
The substring with start index = 1 is "ba", which is an anagram of "ab".
The substring with start index = 2 is "ab", which is an anagram of "ab".


I solved it but it was not efficient. It gave Time limit Exceeded error. I knew this would happen when i was solving it but still wanted to finish coding with what I had thought before I saw solutions.
Even after seeing the solutions it took me quite some time to understand. Following links I followed to understand and then applied one of them:
https://leetcode.com/problems/find-all-anagrams-in-a-string/discuss/92007/Sliding-Window-algorithm-template-to-solve-all-the-Leetcode-substring-search-problem.
https://leetcode.com/problems/find-all-anagrams-in-a-string/discuss/92015/ShortestConcise-JAVA-O(n)-Sliding-Window-Solution
https://leetcode.com/problems/find-all-anagrams-in-a-string/discuss/92059/O(n)-Sliding-Window-JAVA-Solution-Extremely-Detailed-Explanation - applied this(look for comments in the code to understand)
https://www.youtube.com/watch?v=-rcfE1Tj2E0 - this is alternate method to solve. But this method uses more space and there is comparison at each sliding window which would increase the time for very long texts.
*/

class Solution {
    public List<Integer> findAnagrams(String s, String p) {
        
        List<Integer> res = new ArrayList<>();
        
        if(s == null || s.length() < p.length()) return res;
        
        int[] hash = new int[26];
        
        for(char c : p.toCharArray()){
            hash[c - 'a']++;
        }
        
        int start = 0, end = 0;
        int pLen = p.length();
        int diff = pLen;
        
        while(end < pLen){
            char ch = s.charAt(end);
            hash[ch - 'a']--;
            if(hash[ch - 'a'] >= 0){
                diff--;
            }
            end++;
        }
        
        if(diff == 0){
            res.add(0);
        }
        
        while(end < s.length()){
            char ch = s.charAt(start);
            
            if(hash[ch - 'a'] >= 0){
                diff++;
            }
            
            hash[ch - 'a']++;
            start++;
            
            ch = s.charAt(end);
            hash[ch - 'a']--;
            
            if(hash[ch-'a'] >= 0){
                diff--;
            }
            
            if(diff == 0){
                res.add(start);
            }
            end++;
        }
        return res;
    }
}