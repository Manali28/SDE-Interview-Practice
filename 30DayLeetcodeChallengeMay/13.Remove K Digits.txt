/*
Given a non-negative integer num represented as a string, remove k digits from the number so that the new number is the smallest possible.

Note:
The length of num is less than 10002 and will be â‰¥ k.
The given num does not contain any leading zero.
Example 1:

Input: num = "1432219", k = 3
Output: "1219"
Explanation: Remove the three digits 4, 3, and 2 to form the new number 1219 which is the smallest.
Example 2:

Input: num = "10200", k = 1
Output: "200"
Explanation: Remove the leading 1 and the number is 200. Note that the output must not contain leading zeroes.
Example 3:

Input: num = "10", k = 2
Output: "0"
Explanation: Remove all the digits from the number and it is left with nothing which is 0.



After couple of wrong submissions I was able to get 2ms runtime solution on LC.

Edge cases examples:

Input: num = "5337", k = 2
Output: "33"

Input: num = "1234567890", k = 9
Output: "0"

Input: num = "112", k = 1
Output: "11"

*/

class Solution {
    public String removeKdigits(String num, int k) {
        if(num == null || num.length() <= k) return "0";

		StringBuilder sb = new StringBuilder(num);
		int count = k;
		int i = 0;
		for(i = 1; i < sb.length(); i++){
            if(i == 0)continue;
			if(k > 0){
                if(sb.charAt(i) < sb.charAt(i-1)){
                    sb.deleteCharAt(i-1);
	                k--;
                    i=i-2; //Want to look at the number which was before the number we deleted.
                }
            }else{
                break;
            }
        }
		
		//for leading zeroes
		int j = 0;
		while(j < sb.length() && sb.charAt(j) == '0'){
			sb.deleteCharAt(j);
        }

		//if the number was in a ascending order the remove digits from last
        if(k > 0){
            while(k > 0 && sb.length() > 0){
                sb.deleteCharAt(sb.length()-1);
                k--;
            }
        }
        
        return sb.length() == 0 ? "0":sb.toString();
    }
}