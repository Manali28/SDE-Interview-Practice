/*

Given a binary search tree, write a function kthSmallest to find the kth smallest element in it.


Example 1:

Input: root = [3,1,4,null,2], k = 1
   3
  / \
 1   4
  \
   2
Output: 1
Example 2:

Input: root = [5,3,6,2,4,null,null,1], k = 3
       5
      / \
     3   6
    / \
   2   4
  /
 1
Output: 3
Follow up:
What if the BST is modified (insert/delete operations) often and you need to find the kth smallest frequently? How would you optimize the kthSmallest routine?

 

Constraints:

The number of elements of the BST is between 1 to 10^4.
You may assume k is always valid, 1 ≤ k ≤ BST's total elements. 


Had solved this previously. Since it is BST I knew it would be inorder approach to find the Kth smallest element

*/

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public int kthSmallest(TreeNode root, int k) {
        
        if(root == null) return -1;
        
        //PriorityQueue<Integer> pq = new PriorityQueue<>(k,Collections.reverseOrder());
        
        Deque<TreeNode> s = new ArrayDeque<>();
        
        //Stack<Integer> result = new Stack<>();
        
        while(true){
            if(root != null){
                s.push(root);
                root = root.left;
            }else{
                root = s.pop();
                if(--k == 0) return root.val;
                root = root.right;
            }
        }
    }
}