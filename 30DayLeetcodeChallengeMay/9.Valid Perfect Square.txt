/*
Given a positive integer num, write a function which returns True if num is a perfect square else False.

Note: Do not use any built-in library function such as sqrt.

Example 1:

Input: 16
Output: true
Example 2:

Input: 14
Output: false


I had got the idea that I have to do it using binary search and the solution worked for few examples. But I had initialized variables with int rather than long so in some cases it was overflowing and giving wrong answer.
Another tip is that: For num>2 the square root a is always less than num/2 and greater than 1: 1<x<num/2. SO initial the right edge with num/2. This helps in very large sqyare values since reduces the number of iterations.
*/

class Solution {
    public boolean isPerfectSquare(int num) {
        if(num == 0) return false;
        if(num == 1) return true;
        long left = 2;
        long right = num/2;
        
        while(left <= right){
            long mid = left + (right - left)/2;
            long sqr = mid * mid;
            if(sqr == num){
                return true;
            }else if(sqr < num){
                left = mid + 1;
            }else{
                right = mid - 1;
            }
        }
        return false;
    }
}