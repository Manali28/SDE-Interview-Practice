/*
You are given a sorted array consisting of only integers where every element appears exactly twice, except for one element which appears exactly once. Find this single element that appears only once.

 

Example 1:

Input: [1,1,2,3,3,4,4,8,8]
Output: 2
Example 2:

Input: [3,3,7,7,10,11,11]
Output: 10
 

Note: Your solution should run in O(log n) time and O(1) space.


After solving previous problems in the challenge I got an idea that this one I have to solve using binary search so started with that approach. Linear approach is easy but wanted to solve with better time complexity.
*/

class Solution {
    public int singleNonDuplicate(int[] nums) {
        
        if(nums == null || nums.length == 0 || nums.length%2 == 0) throw new IllegalArgumentException("Single element does not exist");
        
        int len = nums.length;
        
        if(len == 1) return nums[0];
        
        int left = 0;
        int right = len - 1;
        
        while(left <= right){
            int mid = left + (right - left)/2;
            
            if(mid + 1 < len && nums[mid] == nums[mid + 1]){
                if((right - mid+1)%2 == 0){
                    right = mid - 1;
                }else{
                    left = mid + 2;
                }
            }else if(mid - 1 >= 0 && nums[mid] == nums[mid - 1]){
                if((mid - 1 - left)%2 == 0){
                    left = mid+1;
                }else{
                    right = mid-2;
                }
            }else{
                return nums[mid];
            }
        }
        return nums[left];        
        
    }
}