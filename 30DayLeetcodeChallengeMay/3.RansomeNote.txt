/*
Given an arbitrary ransom note string and another string containing letters from all the magazines, write a function that will return true if the ransom note can be constructed from the magazines ; otherwise, it will return false.

Each letter in the magazine string can only be used once in your ransom note.

Note:
You may assume that both strings contain only lowercase letters.

canConstruct("a", "b") -> false
canConstruct("aa", "ab") -> false
canConstruct("aa", "aab") -> true
*/

//Solution 1: This is more String manipulation so will take more time for bigger inputs

class Solution {
    public boolean canConstruct(String ransomNote, String magazine) {
        
        if(ransomNote == null || magazine == null) return false;
        
        StringBuilder sb = new StringBuilder(magazine);
        
        for(char c : ransomNote.toCharArray()){
            int index = sb.indexOf(Character.toString(c));
            if(index != -1){
                sb.deleteCharAt(index);
            }else{
                return false;
            }
        }
        return true;
    }
}


//Solution 2: this is more efficient

class Solution {
    
    public boolean canConstruct(String ransomNote, String magazine) {
        int[] pool = new int[26];
        
        for (char c : ransomNote.toCharArray()) pool[c - 'a'] -= 1;
        
        for (char c : magazine.toCharArray()) pool[c - 'a'] += 1;
        
        for (int i = 0; i < 26; i++) if (pool[i] < 0) return false;
        
        return true;
    }
}

//Solution 3: using HashMap for magazine character count and then iterating ransomeNote and decreasing the count from magazine if present. If count is less than zero then return false.