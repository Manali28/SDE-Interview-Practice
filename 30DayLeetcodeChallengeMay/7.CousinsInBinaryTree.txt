/*
In a binary tree, the root node is at depth 0, and children of each depth k node are at depth k+1.

Two nodes of a binary tree are cousins if they have the same depth, but have different parents.

We are given the root of a binary tree with unique values, and the values x and y of two different nodes in the tree.

Return true if and only if the nodes corresponding to the values x and y are cousins.

 ** For Pictures of example goto https://leetcode.com/problems/cousins-in-binary-tree/

Example 1:

(Could not paste the picture)

Input: root = [1,2,3,4], x = 4, y = 3
Output: false

Example 2:

(Could not paste the picture)

Input: root = [1,2,3,null,4,null,5], x = 5, y = 4
Output: true

Example 3:

(Could not paste the picture)

Input: root = [1,2,3,null,4], x = 2, y = 3
Output: false
 

Note:

The number of nodes in the tree will be between 2 and 100.
Each node has a unique integer value from 1 to 100.
 
*/


/*
Since this question had to do with depths on each level, it gave a hint to go by BFS(level order traversal). So I started implementing it and got a working solution. Then later reading at the comments I realized that if I find a node for one value at one level and do not find the same for other value at same value then I should stop my search and return false. Because certainly they are not at same level. So no point traversing the whole tree to find the second root for other value.
Hence modified my solution a bit.

The Solution looks pretty long but it is easy to follow along.

Time Complexity : O(N) since in worst case it would travers all Nodes.
*/

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public boolean isCousins(TreeNode root, int x, int y) {
        if(root == null) return false;
        
        Deque<TreeNode> q1 = new ArrayDeque<>();
        Deque<TreeNode> q2 = new ArrayDeque<>();
        
        q1.add(root);
        
        while(!q1.isEmpty() || !q2.isEmpty()){
            Deque<TreeNode> res = new ArrayDeque<>();
            int count = 0;
            while(!q1.isEmpty()){
                root = q1.poll();
                if(root.left != null){
                    if(root.left.val == x || root.left.val == y){
                        res.push(root);
                    }
                    q2.add(root.left);
                }
                if(root.right != null){
                    if(root.right.val == x || root.right.val == y){
                        res.push(root);
                    }
                    q2.add(root.right);
                }
            }
            
            if(!res.isEmpty() && res.size() >= 2){
                TreeNode t1 = res.pop();
                TreeNode t2 = res.pop();
                
                if(t1 != null && t2 != null && t1 != t2){
                    return true;
                }
            }else{
                if(!res.isEmpty()){
                    return false;
                }
            }
            
            while(!q2.isEmpty()){
                root = q2.poll();
                if(root.left != null){
                    if(root.left.val == x || root.left.val == y){
                        res.push(root);
                    }
                    q1.add(root.left);
                }
                if(root.right != null){
                    if(root.right.val == x || root.right.val == y){
                        res.push(root);
                    }
                    q1.add(root.right);
                }
            }
            
            if(!res.isEmpty() && res.size() >= 2){
                TreeNode t1 = res.pop();
                TreeNode t2 = res.pop();
                
                if(t1 != null && t2 != null && t1 != t2){
                    return true;
                }
            }else{
                if(!res.isEmpty()){
                    return false;
                }
            }
            
        }
        
        
        return false;
    }
}


/*
LeetCode Solution by using delimiter and a queue:

Algorithm

    1. Do a level order traversal of the tree using a queue.

    2. For every node that is popped off the queue, check if the node is either Node x or Node y. If it is, then for the first time, set both siblings and cousins flags as true. The flags are set as true to mark the possibility of siblings or cousins.

    3. To distinguish siblings from cousins, we insert markers in the queue. After inserting the children for each node, we also insert a null marker. This marker defines a boundary for each set of siblings and hence helps us to differentiate a pair of siblings from cousins.

    4. Whenever we encounter the null marker during our traversal, we set the siblings flag to false. This is because the marker marks the end of the siblings territory.

    5. The second time we encounter a node which is equal to Node x or Node y we will have clarity about whether or not we are still within the siblings boundary. If we are within the siblings boundary, i.e. if the siblings flag is still true, then we return false. Otherwise, we return true.
	
Complexity Analysis

    1. Time Complexity: O(N)O(N)O(N), where NNN is the number of nodes in the binary tree. In the worst case, we might have to visit all the nodes of the binary tree. Similar to approach 1 this approach would also have a complexity of O(N)O(N)O(N) when the Node x and Node y are present at the last level of the binary tree. The algorithm would follow the standard BFS approach and end up in checking each node before discovering the desired nodes.

    2. Space Complexity: O(N)O(N)O(N). In the worst case, we need to store all the nodes of the last level in the queue. The last level of a binary tree can have a maximum of N2\frac{N}{2}2N​ nodes. Not to forget we would also need space for N4\frac{N}{4}4N​ null markers, one for each pair of siblings. That results in a space complexity of O(3N4)O(\frac{3N}{4})O(43N​) = O(N)O(N)O(N) (You are right Big-O notation doesn't care about constants). 

*/

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {

    public boolean isCousins(TreeNode root, int x, int y) {

        // Queue for BFS
        Queue <TreeNode> queue = new LinkedList <> ();
        queue.add(root);

        while (!queue.isEmpty()) {
            boolean siblings = false;
            boolean cousins = false;

            int nodesAtDepth = queue.size();

            for (int i = 0; i < nodesAtDepth; i++) {
                // FIFO
                TreeNode node = queue.remove();

                // Encountered the marker.
                // Siblings should be set to false as we are crossing the boundary.
                if (node == null) {
                    siblings = false;
                } else {
                    if (node.val == x || node.val == y) {
                        // Set both the siblings and cousins flag to true
                        // for a potential first sibling/cousin found.
                        if (!cousins) {
                            siblings = cousins = true;
                        } else {
                            // If the siblings flag is still true this means we are still
                            // within the siblings boundary and hence the nodes are not cousins.
                            return !siblings;
                        }
                    }

                    if (node.left != null) queue.add(node.left);
                    if (node.right != null) queue.add(node.right);
                    // Adding the null marker for the siblings
                    queue.add(null);
                }
            }
            // After the end of a level if `cousins` is set to true
            // This means we found only one node at this level
            if (cousins) return false;
        }
        return false;
    }
}