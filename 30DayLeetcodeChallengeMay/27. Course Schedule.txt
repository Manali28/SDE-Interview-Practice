/*
There are a total of numCourses courses you have to take, labeled from 0 to numCourses-1.

Some courses may have prerequisites, for example to take course 0 you have to first take course 1, which is expressed as a pair: [0,1]

Given the total number of courses and a list of prerequisite pairs, is it possible for you to finish all courses?

 

Example 1:

Input: numCourses = 2, prerequisites = [[1,0]]
Output: true
Explanation: There are a total of 2 courses to take. 
             To take course 1 you should have finished course 0. So it is possible.
Example 2:

Input: numCourses = 2, prerequisites = [[1,0],[0,1]]
Output: false
Explanation: There are a total of 2 courses to take. 
             To take course 1 you should have finished course 0, and to take course 0 you should
             also have finished course 1. So it is impossible.
 

Constraints:

The input prerequisites is a graph represented by a list of edges, not adjacency matrices. Read more about how a graph is represented.
You may assume that there are no duplicate edges in the input prerequisites.
1 <= numCourses <= 10^5


Had solved this previously. This is application of Topological sort
*/

class Solution {
    public boolean canFinish(int numCourses, int[][] prerequisites) {
        
        HashMap<Integer,List<Integer>> adjList = new HashMap<>();
        
        for(int[] preReq: prerequisites){
            List<Integer> list = adjList.getOrDefault(preReq[0],new ArrayList<>());
            list.add(preReq[1]);
            adjList.put(preReq[0],list);
        }
        
        int[] inDegree = new int[numCourses];
        
        for(int key: adjList.keySet()){
            List<Integer> inDegreeList = adjList.get(key);
            for(int num: inDegreeList){
                inDegree[num]++;
            }
        }
        
        Deque<Integer> queue = new ArrayDeque<>();
        
        for(int i = 0; i < numCourses; i++){
            if(inDegree[i] == 0){
                queue.add(i);
            }
        }
        
        List<Integer> result = new ArrayList<>();
        
        while(!queue.isEmpty()){
            int course = queue.poll();
            result.add(course);
            if(adjList.containsKey(course)){
                List<Integer> inDegreeList = adjList.get(course);
                   for(int num: inDegreeList){
                    if(--inDegree[num] == 0){
                        queue.add(num);
                    }
                } 
            }
        }
        return result.size() == numCourses;
    }
}