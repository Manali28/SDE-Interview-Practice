/*
Problem Statement--
Given a string s and a list of strings dict, you need to add a closed pair of bold tag <b> and </b> to wrap the substrings in s that exist in dict. If two such substrings overlap, you need to wrap them together by only one pair of closed bold tag. Also, if two substrings wrapped by bold tags are consecutive, you need to combine them.

Example 1:

Input: 
s = "abcxyz123"
dict = ["abc","123"]
Output:
"<b>abc</b>xyz<b>123</b>"

 

Example 2:

Input: 
s = "aaabbcc"
dict = ["aaa","aab","bc"]
Output:
"<b>aaabbc</b>c"

 

Constraints:

    The given dict won't contain duplicates, and its length won't exceed 100.
    All the strings in input have length in range [1, 1000].

Note: This question is the same as 758: https://leetcode.com/problems/bold-words-in-string/

I had to look through the solution to get this. This post https://leetcode.com/problems/add-bold-tag-in-string/discuss/104262/short-java-solution came handy. There are other solutions using Merge Interval Technique and Trie datastructure but this was easy for me to understand.
*/

public String addBoldTagArray(String s, String[] dict) {
        int n = s.length();
        int[] mark = new int[n + 1];
        for (String d : dict) {
            int i = -1;
            i = s.indexOf(d, i);
            while (i != -1) {
                mark[i]++;
                mark[i + d.length()]--;
                i = s.indexOf(d, i + 1);
            }
        }
        StringBuilder sb = new StringBuilder();
        int count = 0;
        boolean bold = false;  // We can not have a nested bold tag, so just track the current one.
        for (int i = 0; i <= n; i++) {
            count += mark[i];
            if (count > 0 && !bold) {
                sb.append("<b>");
                bold = true;
            }
            if (count == 0 && bold) {
                sb.append("</b>");
                bold = false;
            }
            if (i == n)
                break;
            sb.append(s.charAt(i));
        }
        return sb.toString();
    }