/*
This is the most frequently asked question in Google currently.
I had to look up the discuss section to understand the solution.
following are the post I referred:
https://leetcode.com/problems/guess-the-word/discuss/133862/Random-Guess-and-Minimax-Guess-with-Comparison - covers all solutions and good explanation
https://leetcode.com/problems/guess-the-word/discuss/134087/C%2B%2B-elimination-histogram-beats-Minimax
https://leetcode.com/problems/guess-the-word/discuss/556075/How-to-explain-to-interviewer-843.-Guess-the-Word
https://leetcode.com/problems/guess-the-word/discuss/652210/Clean-Java-Solution-with-explanation-of-MinMax - my code is similar to this
*/

/**
 * // This is the Master's API interface.
 * // You should not implement it, or speculate about its implementation
 * interface Master {
 *     public int guess(String word) {}
 * }
 */
class Solution {
    public void findSecretWord(String[] wordlist, Master master) {
        // We can't guess more than 10 times!
        for (int t = 0; t < 10; ++t){
            String guess = findPotentialCandidate(wordlist);
            int matchedInt = master.guess(guess);

            if(matchedInt == 6)return;

            List<String> list = new ArrayList<>();
            for(String word: wordlist){
                if(match(guess,word) == matchedInt){
                    list.add(word);
                }
            }
            wordlist = list.toArray(new String[0]); 
        }
    }
    
    public String findPotentialCandidate(String[] wordList){
        int[][] positionToCharacterFreq = new int[6][26];
        for(int i=0; i < wordList.length;i++){
            for(int j = 0; j < 6;j++){
                char currentChar = wordList[i].charAt(j);
                positionToCharacterFreq[j][currentChar - 'a']++;
            }
        }
        
        int bestScore = 0;
        String strongCandidate = "";
        
        for(int i=0; i < wordList.length;i++){
            int score = 0;
            for(int j = 0; j < 6;j++){
                char currentChar = wordList[i].charAt(j);
                score += positionToCharacterFreq[j][currentChar - 'a'];
            }
            
            if(score > bestScore){
                bestScore = score;
                strongCandidate = wordList[i];
            }
        }
        return strongCandidate;
    }
    
    public int match(String word1, String word2){
        int match = 0;
        for(int i = 0; i < 6; i++){
            if(word1.charAt(i) == word2.charAt(i)){
                match++;
            }
        }
        return match;
    }
}