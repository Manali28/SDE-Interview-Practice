/*
Complexity Analysis

Time complexity : O(n). Index j will iterate n times.
Space complexity: O(1). Since hashmap will have not more than 26 characters.
*/

class Solution {
    public int lengthOfLongestSubstring(String s) {
        
        if(s == null || s.length() == 0) return 0;
        if(s.length() == 1) return 1;
        
        HashMap<Character,Integer> characterMap = new HashMap<>();
        
        int i = 0, j = 0;
        int maxLength = 0;
        while(i <= j && j < s.length()){
            if(characterMap.containsKey(s.charAt(j))){
                i = i > characterMap.get(s.charAt(j))?i:characterMap.get(s.charAt(j))+1;
            }
            maxLength = Math.max(maxLength, j - i + 1);
            characterMap.put(s.charAt(j),j);
            j++;
            
        }
        return maxLength;
    }
}