/*
A Stepping Number is an integer such that all of its adjacent digits have an absolute difference of exactly 1. For example, 321 is a Stepping Number while 421 is not.

Given two integers low and high, find and return a sorted list of all the Stepping Numbers in the range [low, high] inclusive.

 

Example 1:

Input: low = 0, high = 21
Output: [0,1,2,3,4,5,6,7,8,9,10,12,21]

 

Constraints:

    0 <= low <= high <= 2 * 10^9

*/

class Solution {
    public List<Integer> countSteppingNumbers(int low, int high) {
        
        Deque<Long> queue = new ArrayDeque<>();
        
        for(long i = 1; i < 10; i++)queue.add(i);
        
        List<Integer> result = new ArrayList<>();
        
        if(low == 0) result.add(0);
        
        while(!queue.isEmpty()){
            long curr = queue.remove();
            if(curr >= low && curr <= high){
                result.add((int)curr);
            }
            long lastDigit = curr % 10;
            long[] possibilities = new long[]{lastDigit-1,lastDigit+1};
            for(long possibility:possibilities){
                if(possibility >= 0 && possibility <= 9){
                    long newNum = 10 * curr + possibility;
                    if(newNum <= high)
                        queue.add(10 * curr + possibility);
                }
            }
        }
        //Collections.sort(result);
        return result;
    }
}