//T:O(n), S:O(n)

class Solution {
    public int subarraysDivByK(int[] A, int K) {
        
        if(A == null || A.length < 1)return 0;
        
        int[] prefixSum = calculatePrefixSum(A);
        
        return calculateSubarraysDivByK(prefixSum,K);
        
    }
    
    private int calculateSubarraysDivByK(int[] prefixSum, int K){
        int result = 0;
        HashMap<Integer,Integer> map = new HashMap<>();
        map.put(0,1);
        
        for(int i = 0; i < prefixSum.length; i++){
            int sum = 0;
            if(prefixSum[i] < 0){
                sum = prefixSum[i];
                while(sum < 0){
                    sum = (sum + K) % K;
                }
            }
            int mod = prefixSum[i] < 0 ? sum: prefixSum[i] % K;
            result += map.getOrDefault(mod,0);
            map.put(mod, map.getOrDefault(mod,0)+1);
        }
                
        return result;
    }
    
    private int[] calculatePrefixSum(int[] A){
        
        int[] prefixSum = new int[A.length];
        
        prefixSum[0] = A[0];
        
        for(int i = 1; i < A.length; i++){
            prefixSum[i] = prefixSum[i-1] + A[i];
        }
        
        return prefixSum;
    }
}