/*
The solution can still be improved.

T:O(n); S:O(n)
*/

class Solution {
    public int numberOfSubarrays(int[] nums, int k) {
        if(nums == null || nums.length < 1) return 0;
        
        int result = 0;
        int[] oddArr = new int[nums.length+1];
        oddArr[0] = 0;
        
        HashMap<Integer,Integer> map = new HashMap<>();
        map.put(0,1);
        for(int i = 0; i < nums.length; i++){
            if(nums[i] % 2 == 1){
                oddArr[i+1] = oddArr[i] + 1;
            }else{
                oddArr[i+1] = oddArr[i];
            }
            map.put(oddArr[i+1],map.getOrDefault(oddArr[i+1],0) + 1);
        }
        
        if(oddArr[oddArr.length - 1] == 0) return 0;
        
        for(int count: map.keySet()){
            if(count >= k){
                result += map.get(count) * map.get(count - k);
            }
        }
        return result;
    }
}