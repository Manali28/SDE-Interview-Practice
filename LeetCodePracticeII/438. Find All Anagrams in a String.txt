/*
Complexity Analysis

    Time complexity: O(Ns​+Np​) since it's one pass along both strings.

    Space complexity: O(1), because pCount and sCount contain not more than 26 elements.

*/


class Solution {
    public List<Integer> findAnagrams(String s, String p) {
        if(s == null) return new ArrayList<>();
        
        HashMap<Character,Integer> sMap = new HashMap<>();
        HashMap<Character,Integer> pMap = new HashMap<>();
        List<Integer> result = new ArrayList<>();
        
        for(char c:p.toCharArray()){
            pMap.put(c,pMap.getOrDefault(c,0)+1);
        }
        
        int i = 0, j = 0;
        
        while(i <= j && j < s.length()){
            
            sMap.put(s.charAt(j), sMap.getOrDefault(s.charAt(j),0)+1);
            
            if(j - i + 1 == p.length()){
                if(sMap.equals(pMap)){
                    result.add(i);
                }
                if(sMap.get(s.charAt(i)) > 1){
                    sMap.put(s.charAt(i),sMap.get(s.charAt(i)) - 1);
                }else{
                    sMap.remove(s.charAt(i));
                }
                i++;
            }
            j++;
        }
        
        return result;
    }
}