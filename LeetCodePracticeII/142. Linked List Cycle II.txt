/*
Solution 1: uses space
T: O(n); S:O(n)
*/

/**
 * Definition for singly-linked list.
 * class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    public ListNode detectCycle(ListNode head) {
        if(head == null || head.next == null) return null;
        
        HashMap<ListNode,Integer> map = new HashMap<>();
        int counter = 0;
        ListNode start = head;
        while(start != null && start.next != null){
            if(map.containsKey(start)){
                return start;
            }else{
                map.put(start,counter++);
            }
            start = start.next;
        }
        
        return null;
        
    }
}