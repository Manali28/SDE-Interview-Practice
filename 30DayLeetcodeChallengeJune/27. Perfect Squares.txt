/*
Given a positive integer n, find the least number of perfect square numbers (for example, 1, 4, 9, 16, ...) which sum to n.

Example 1:

Input: n = 12
Output: 3 
Explanation: 12 = 4 + 4 + 4.
Example 2:

Input: n = 13
Output: 2
Explanation: 13 = 4 + 9.


This is very nicley explained in this video : https://www.youtube.com/watch?v=1xfx6M_GqFk. My solution is also from video
*/

// Soultion 1: Legendre's 3 square theorem - Time complexity is sqr root of N

class Solution {
    public int numSquares(int n) {
        if(Math.ceil(Math.sqrt(n)) == Math.floor(Math.sqrt(n))) return 1;
        
        while(n%4 == 0){
            n /= 4;
        }
        
        if(n%8 == 7) return 4;
        
        for(int i = 1; i*i <= n; i++){
            int base = (int)Math.sqrt(n-(i*i));
            if(base*base == n -(i*i)) return 2;
        }
        return 3;
    }
}

// Solution 2: DP - Time Complexity is O(n * Sqr root of n)

class Solution {
    public int numSquares(int n) {
        if(Math.ceil(Math.sqrt(n)) == Math.floor(Math.sqrt(n))) return 1;
        
        int[] dp = new int[n+1];
        dp[0] = 0;
        
        for(int i = 1; i <= n; i++){
            dp[i] = i;
            for(int j = 1; j*j <= i; j++){
                int sq = j*j;
                dp[i] = Math.min(dp[i], 1 + dp[i-sq]);
            }
        }
        return dp[n];
    }
}

