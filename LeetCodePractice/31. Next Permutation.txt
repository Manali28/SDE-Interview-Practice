/*
At first I was confused with the problem but then did some thinking and watched this https://www.youtube.com/watch?v=quAS1iydq7U video to get a clear picture.
Time Complexity: O(n)
Space Complexity: O(1)
*/

class Solution {
    public void nextPermutation(int[] nums) {
        if(nums == null || nums.length == 0)return;
        int i = nums.length-2;
        while(i >= 0 && nums[i] >= nums[i+1]){
            i--;
        }
        
        if(i >= 0){
            int j = nums.length - 1;
            while(j >= 0 && nums[i] >= nums[j]){
                j--;
            }
            swap(nums,i,j);
        }
        reverse(nums,i+1);
    }
    
    public void reverse(int[] nums, int start){
        int left = start;
        int right = nums.length - 1;
        while(left < right){
            swap(nums,left,right);
            left++;
            right--;
        }
    }
    
    public void swap(int[] nums, int first, int second){
        int temp = nums[first];
        nums[first] = nums[second];
        nums[second] = temp;
    }
}