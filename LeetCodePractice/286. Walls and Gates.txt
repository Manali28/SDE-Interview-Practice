/*
You are given a m x n 2D grid initialized with these three possible values.

    -1 - A wall or an obstacle.
    0 - A gate.
    INF - Infinity means an empty room. We use the value 231 - 1 = 2147483647 to represent INF as you may assume that the distance to a gate is less than 2147483647.

Fill each empty room with the distance to its nearest gate. If it is impossible to reach a gate, it should be filled with INF.

Example: 

Given the 2D grid:

INF  -1  0  INF
INF INF INF  -1
INF  -1 INF  -1
  0  -1 INF INF

After running your function, the 2D grid should be:

  3  -1   0   1
  2   2   1  -1
  1  -1   2  -1
  0  -1   3   4




I initially started with solving on similar line of Number of Island and Surrounded region problem using DFS. I did get a working solution but my solution was not working for all scenarios. So I looked at the solution. 

DFS solution : The trick of passing the count in every call was so elegant. But after reading about the time complexity it turns out that DFS solution works good where the gates and interconnected. So less calls will be overlapped. If the gates are next to each other then because of many overlapping calls the performance decreases.

BFS Solution: Here every cell is traversed only once. Sp time complexity )(m X n) is stable and so is more efficient.

*/

/*
DFS solution
*/

class Solution {
    public void wallsAndGates(int[][] rooms) {
        if(rooms == null || rooms.length == 0 || rooms[0].length == 0) return;
        
        int R = rooms.length;
        int C = rooms[0].length;
        boolean[][] seen = new boolean[R][C];
        for(int i = 0; i < R; i++){
            for(int j = 0; j < C; j++){
                if(rooms[i][j] == 0){
                    helper(i,j,rooms,0);
                }
            }
        }
        
    }
    
    public void helper(int i, int j, int[][] rooms, int d){
        if(i < 0 || i >= rooms.length || j < 0 || j >= rooms[0].length || rooms[i][j] == -1 || rooms[i][j] < d) return;
        
        rooms[i][j] = d;
        
        helper(i+1, j, rooms,d+1);
        helper(i-1, j, rooms,d+1);
        helper(i, j+1, rooms,d+1);
        helper(i, j-1, rooms,d+1);
    }
    
}

/*
BFS Solution
*/

	public static final int[] dx = {-1, 0, 1, 0};
	public static final int[] dy = {0, 1, 0, -1};
	
	public void wallsAndGates(int[][] rooms) {
	    if (rooms.length == 0) return;
	    int m = rooms.length, n = rooms[0].length;

	    Deque<Integer> queue = new ArrayDeque<>();
	    for (int i = 0; i < m; ++i)
	        for (int j = 0; j < n; ++j)
	            if (rooms[i][j] == 0) queue.offer(i * n + j); // Put gates in the queue

	    while (!queue.isEmpty()) {
	        int x = queue.poll();
	        int i = x / n, j = x % n;
	        for (int k = 0; k < 4; ++k) {
	            int p = i + dx[k], q = j + dy[k]; // empty room
	            if (0 <= p && p < m && 0 <= q && q < n && rooms[p][q] == Integer.MAX_VALUE) {
	                rooms[p][q] = rooms[i][j] + 1;
	                queue.offer(p * n + q);
	            }
	        }
	    }
	}