/*
I referred https://www.geeksforgeeks.org/topological-sorting-indegree-based-solution/ this technique to solve this problem
*/

class Solution {
    public int[] findOrder(int numCourses, int[][] prerequisites) {
        int[] result = new int[numCourses];
        if(numCourses == 0) return new int[0];
        
        List<List<Integer>> adj = new ArrayList<>();
        
        for(int i = 0; i < numCourses;i++){
            adj.add(new ArrayList<>());
        }
        
        for(int i = 0; i < prerequisites.length;i++){
            int[] temp = prerequisites[i];
            adj.get(temp[0]).add(temp[1]);
        }
        
        int[] inDegree = new int[numCourses];
        
        for(int i = 0; i < numCourses;i++){
            for(int num : adj.get(i)){
                inDegree[num]++;
            }
        }
        
        Deque<Integer> queue = new ArrayDeque<>();
        
        for(int i = 0; i < numCourses;i++){
            if(inDegree[i] == 0){
                queue.add(i);
            }            
        }
        
        List<Integer> res = new ArrayList<>();
        int cnt = 0;
        
        while(!queue.isEmpty()){
            int u = queue.poll();
            res.add(u);
            
            for(int num : adj.get(u)){
                if(--inDegree[num] == 0){
                    queue.add(num);
                }
            }
            cnt++;     
        }
        
        if(cnt != numCourses){
            return new int[0];
        }else{
            
            for (int i = res.size()-1; i >= 0; i--) 
                result[res.size() - i - 1] = res.get(i); 
            
            return result;
        }
    }
}