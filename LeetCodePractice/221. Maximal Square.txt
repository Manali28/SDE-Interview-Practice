/*
This is similar to LC 1277.Count Square Submatrices with All Ones which I solved in yesterday's LC May Challenge. So went about aolving in similar way. My solution was accepted but it was not a very optimized solution.
So Solution 2 & 3 are the optimized solution on similar idea which I have used in Solution 1.(Solution 2 & 3 are LC official solutions)
*/

-- Solution 1:
class Solution {
    public int maximalSquare(char[][] matrix) {
        
        if(matrix == null || matrix.length == 0) return 0;
        
        int rLen = matrix.length;
        int cLen = matrix[0].length;
        
        int[][] intMatrix = new int[rLen][cLen];
        boolean isOne = false;
        
        for(int i = 0; i < rLen; i++){
            for(int j = 0; j < cLen; j++){
                if(matrix[i][j] == '1'){
                   intMatrix[i][j] = 1; 
                   isOne = true; 
                }else{
                    intMatrix[i][j] = 0;
                }
            }
        }
        
        if(rLen == 1){
            for(int i = 0; i < cLen; i++){
                if(intMatrix[0][i] == 1){
                    return 1;
                }
            }
        }
        
        if(cLen == 1){
            for(int i = 0; i < rLen; i++){
                if(intMatrix[i][0] == 1){
                    return 1;
                }
            }
        }
        
        int maxArea = Integer.MIN_VALUE;
        
        for(int i = 0; i < rLen; i++){
            for(int j = 0; j < cLen; j++){
                if(i == 0 || j == 0){
                    continue;
                }
                if(intMatrix[i][j] == 1){
                    int temp = Math.min(intMatrix[i-1][j],Math.min(intMatrix[i-1][j-1],intMatrix[i][j-1]))+1;
                    maxArea = Math.max(temp,maxArea);
                    intMatrix[i][j] = temp;
                }
            }
        }
        
        return maxArea == Integer.MIN_VALUE && isOne ? 1 : maxArea*maxArea;
    }
}


--Solution 2

public class Solution {
    public int maximalSquare(char[][] matrix) {
        int rows = matrix.length, cols = rows > 0 ? matrix[0].length : 0;
        int[][] dp = new int[rows + 1][cols + 1];
        int maxsqlen = 0;
        for (int i = 1; i <= rows; i++) {
            for (int j = 1; j <= cols; j++) {
                if (matrix[i-1][j-1] == '1'){
                    dp[i][j] = Math.min(Math.min(dp[i][j - 1], dp[i - 1][j]), dp[i - 1][j - 1]) + 1;
                    maxsqlen = Math.max(maxsqlen, dp[i][j]);
                }
            }
        }
        return maxsqlen * maxsqlen;
    }
}

-- Solution 3

public class Solution {
    public int maximalSquare(char[][] matrix) {
        int rows = matrix.length, cols = rows > 0 ? matrix[0].length : 0;
        int[] dp = new int[cols + 1];
        int maxsqlen = 0, prev = 0;
        for (int i = 1; i <= rows; i++) {
            for (int j = 1; j <= cols; j++) {
                int temp = dp[j];
                if (matrix[i - 1][j - 1] == '1') {
                    dp[j] = Math.min(Math.min(dp[j - 1], prev), dp[j]) + 1;
                    maxsqlen = Math.max(maxsqlen, dp[j]);
                } else {
                    dp[j] = 0;
                }
                prev = temp;
            }
        }
        return maxsqlen * maxsqlen;
    }
}