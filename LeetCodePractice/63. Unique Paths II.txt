/*
I started with recursive solution but then it was not handling the cases properly so switched to DP approach.
I had to look through leetcode solution.

Complexity Analysis

Time Complexity: O(M \times N)O(M×N). The rectangular grid given to us is of size M \times NM×N and we process each cell just once.
Space Complexity: O(1)O(1). We are utilizing the obstacleGrid as the DP array. Hence, no extra space.
*/

class Solution {
    public int uniquePathsWithObstacles(int[][] obstacleGrid) {
        if(obstacleGrid == null || obstacleGrid.length == 0 || obstacleGrid[0].length == 0) return 0;
        
        int R = obstacleGrid.length;
        int C = obstacleGrid[0].length;
        
        if (obstacleGrid[0][0] == 1 || obstacleGrid[R - 1][C - 1] == 1) {
            return 0;
        }
        
        obstacleGrid[0][0] = 1;
        
        for(int i = 1; i < R; i++){
            obstacleGrid[i][0] = (obstacleGrid[i][0] == 0 && obstacleGrid[i-1][0] == 1)?1:0;
        }
        
        for(int j = 1; j < C; j++){
            obstacleGrid[0][j] = (obstacleGrid[0][j] == 0 && obstacleGrid[0][j-1] == 1)?1:0;
        }
        
        for(int i = 1; i < R; i++){
            for(int j = 1; j < C; j++){
                if(obstacleGrid[i][j] == 0){
                    obstacleGrid[i][j] = obstacleGrid[i-1][j] + obstacleGrid[i][j-1];
                }else{
                    obstacleGrid[i][j] = 0;
                }
            }
        }
        return obstacleGrid[R-1][C-1];
    }
}