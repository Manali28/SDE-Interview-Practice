/*
Initially I tried with implementing dfs similar on line of Numer of Island problem which helped me think thorugh the problem and evaluate where it won't work and what changes I have to make. As I started I was able to get to one point after which I was stuck. So I went thorugh Leetcode solution but I wanted something in lines of my thought process and luckily found similar one on Program creek https://www.programcreek.com/2014/04/leetcode-surrounded-regions-java/ which really helped and backed my thinking.

Modified the solution of programcreek a bit to support my style of coding.
*/

class Solution {
    public void solve(char[][] board) {
        if(board == null || board.length == 0 || board[0].length == 0) return;
        
        int R = board.length;
        int C = board[0].length;
        
        for(int i = 0; i < R; i++){
            if(board[i][0] == 'O'){
                helper(i,0,board);
            }
            if(board[i][C-1] == 'O'){
                helper(i,C-1,board);
            }
        }
        
        for(int i = 0; i < C; i++){
            if(board[0][i] == 'O'){
                helper(0,i,board);
            }
            if(board[R-1][i] == 'O'){
                helper(R-1,i,board);
            }
        }
        
        
        for(int i = 0; i < R; i++){
            for(int j = 0; j < C; j++){
                if(board[i][j] == 'O'){
                    board[i][j] = 'X';
                }else if(board[i][j] == '#'){
                    board[i][j] = 'O';
                }
            }
        }
    }
    
    public void helper(int i, int j, char[][] board){
        if(i < 0 || i >= board.length || j < 0 || j >= board[0].length || board[i][j] == 'X' || board[i][j] == '#') return;
        
        board[i][j] = '#';
        
        helper(i+1, j, board);
        helper(i-1, j, board);
        helper(i, j+1, board);
        helper(i, j-1, board);
    }
}